#!/usr/bin/env python3
import sys
from types import SimpleNamespace

import psutil

from middlewared.plugins.system.dmi import DMIDecode
from middlewared.plugins.system.product import is_enterprise_ix_hardware
from middlewared.plugins.truenas import get_chassis_hardware
from middlewared.plugins.tunables import zfs_parameter_value
from middlewared.utils.db import query_table, update_table

KiB = 1024 ** 1
MiB = 1024 ** 2
GiB = 1024 ** 3

MIN_ZFS_RESERVED_MEM = 1 * GiB

zfs_parameters = {}


def zfs_parameter(tunable_name):
    def decorator(func):
        zfs_parameters[tunable_name] = func
        return func

    return decorator


@zfs_parameter("zfs_dirty_data_max_max")
def guess_vfs_zfs_dirty_data_max_max(context):
    if context.hardware.startswith("M"):
        return 12 * GiB
    else:
        return None


@zfs_parameter("zfs_arc_max")
def guess_vfs_zfs_arc_max(context):
    if context.physmem / GiB > 200:
        return int(max(min(int(context.physmem * .92),
                           context.physmem - (context.kernel_reserved + context.userland_reserved)),
                       MIN_ZFS_RESERVED_MEM))
    else:
        return int(max(min(int(context.physmem * .9),
                           context.physmem - (context.kernel_reserved + context.userland_reserved)),
                       MIN_ZFS_RESERVED_MEM))


@zfs_parameter("l2arc_noprefetch")
def guess_vfs_zfs_l2arc_noprefetch(context):
    return 0


@zfs_parameter("l2arc_write_max")
def guess_vfs_zfs_l2arc_write_max(context):
    return 10000000


@zfs_parameter("l2arc_write_boost")
def guess_vfs_zfs_l2arc_write_boost(context):
    return 40000000


@zfs_parameter("zfs_vdev_async_read_max_active")
def guess_vfs_zfs_vdev_async_read_max_active(context):
    if context.hardware == "Z50":
        return 64
    else:
        return None


@zfs_parameter("zfs_vdev_sync_read_max_active")
def guess_vfs_zfs_vdev_sync_read_max_active(context):
    if context.hardware == "Z50":
        return 64
    else:
        return None


@zfs_parameter("zfs_vdev_async_write_max_active")
def guess_vfs_zfs_vdev_async_write_max_active(context):
    if context.hardware == "Z50":
        return 64
    else:
        return None


@zfs_parameter("zfs_vdev_sync_write_max_active")
def guess_vfs_zfs_vdev_sync_write_max_active(context):
    if context.hardware == "Z50":
        return 64
    else:
        return None


@zfs_parameter("zfs_vdev_sync_write_max_active")
def guess_vfs_zfs_zfetch_max_distance(context):
    return 64 * MiB


if __name__ == "__main__":
    dmi = DMIDecode().info()
    chassis_hardware = get_chassis_hardware(dmi)
    is_enterprise = is_enterprise_ix_hardware(chassis_hardware)

    if is_enterprise:
        kernel_reserved = 6442450944
        userland_reserved = 4831838208
    else:
        kernel_reserved = 1073741824
        userland_reserved = 2417483648

    context = SimpleNamespace(
        hardware=chassis_hardware,
        physmem=psutil.virtual_memory().total,
        kernel_reserved=kernel_reserved,
        userland_reserved=userland_reserved,
    )

    recommendations = {}
    for knob, func in zfs_parameters.items():
        retval = func(context)
        if retval is None:
            continue

        recommendations[knob] = str(retval)

    overwrite = False
    changed_values = False
    qs = {i["var"]: i for i in query_table("system_tunable", prefix="tun_")}
    for var, value in recommendations.items():
        if tunable := qs.get(var, {}):
            if not overwrite:
                # Already exists and we're honoring the user setting. Move along.
                continue
            elif tunable["value"] == value:
                # We bail out here because if we set a value to what the database
                # already has we'll set changed_values = True which will
                # cause the system to be rebooted.
                continue

        comment = "Generated by autotune"
        if id := tunable.pop("id", None):
            update_table("UPDATE system_tunable SET tun_value = ?, tun_comment = ? WHERE id = ?", (value, comment, id))
        else:
            orig_value = zfs_parameter_value(var)
            update_table(
                "INSERT INTO system_tunable (tun_type, tun_var, tun_value, tun_orig_value, tun_comment, tun_enabled)"
                "VALUES (?, ?, ?, ?, ?, ?)",
                ("ZFS", var, value, orig_value, comment, 1)
            )

        # If we got this far, that means the database save went through just
        # fine at least once.
        changed_values = True

    if changed_values:
        sys.exit(2)
