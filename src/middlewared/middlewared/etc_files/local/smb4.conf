#
# SMB.CONF(5)		The configuration file for the Samba suite 
# $FreeBSD$
#
<%
        import os
        import sys
        import logging
        logger = logging.getLogger(__name__)

        LOGLEVEL_UNMAP = {
            'NONE': '0',
            'MINIMUM': '1',
            'NORMAL': '2',
            'FULL': '3',
            'DEBUG': '10',
        }

        parsed_conf = {}

        def get_db_config():
            conf = {}

            conf['cifs'] = middleware.call_sync('smb.config')
            conf['ad'] = middleware.call_sync('activedirectory.config')
            conf['ldap'] = middleware.call_sync('datastore.config', 'directoryservice.ldap')
            conf['nis'] = middleware.call_sync('datastore.config', 'directoryservice.nis')
            conf['gc'] = middleware.call_sync('network.configuration.config')
            conf['shares'] = middleware.call_sync('sharing.smb.query', [['enabled', '=', True]])
            conf['role'] = 'standalone'
            conf['guest_enabled'] = False
            conf['system_dataset'] = middleware.call_sync('systemdataset.config')
            conf['loglevel'] = LOGLEVEL_UNMAP.get(conf['cifs']['loglevel'])
            conf['fruit_enabled'] = False

            conf['truenas_conf'] = {'is_truenas_ha': False, 'failover_status': 'DEFAULT', 'smb_ha_mode': 'LEGACY'}
            if not middleware.call_sync('system.is_freenas') and middleware.call_sync('failover.licensed'):
                conf['truenas_conf']['is_truenas_ha'] = True
                conf['truenas_conf']['failover_status'] = middleware.call_sync('failover.status')
                if conf['system_dataset']['pool'] != 'freenas-boot':
                    conf['truenas_conf']['smb_ha_mode'] = 'UNIFIED'
            if conf['ad']['enable']:
                conf['role'] = 'ad_member'
            elif conf['ldap']['ldap_enable'] and conf['ldap']['ldap_has_samba_schema']:
                conf['role'] = 'ldap_member'

            if any(filter(lambda x: x['guestok'], conf['shares'])):
                conf['guest_enabled'] = True

            for share in conf['shares']:
                if "fruit" in share['vfsobjects'] or share['timemachine']:
                    conf['fruit_enabled'] = True
                    break

            return conf

        def get_cifs_homedir():
            cifs_homedir = "/home"
            config_homedir = middleware.call_sync('sharing.smb.query', [["enabled", "=", True], ["home", "=", True]])
            if config_homedir:
                cifs_homedir = config_homedir[0]['path']

            return cifs_homedir

        def add_bind_interfaces(pc, db):
            if db['cifs']['bindip']:
                bindips = (db['cifs']['bindip'])
                bindips.insert(0, "127.0.0.1")
                pc.update({'interfaces': " ".join(bindips)})

            pc.update({'bind interfaces only': 'Yes'})

        def add_general_params(pc, db):
            if os.path.exists("/usr/local/etc/smbusername.map"):
                pc.update({'username map': '/usr/local/etc/smbusername.map'})
            pc.update({'dns proxy': 'No'})
            pc.update({'deadtime': '15'})
            pc.update({'max log size': '51200'})
            pc.update({'load printers': 'No'})
            pc.update({'printing': 'bsd'})
            if not db['cifs']['syslog']:
                pc.update({'logging': 'file'})
            pc.update({'log level': db['loglevel']})
            if db['cifs']['enable_smb1']:
                pc.update({'server min protocol': 'NT1'})
            else:
                pc.update({'server min protocol': 'SMB2_02'})
            pc.update({'disable spoolss': 'Yes'})
            if db['cifs']['guest'] != "nobody":
                pc.update({'guest account': db['cifs']['guest']})
            if db['guest_enabled']:
                pc.update({'map to guest': 'Bad User'})
            if db['cifs']['obey_pam_restrictions']:
                pc.update({'obey pam restrictions': 'Yes'})
            if db['cifs']['ntlmv1_auth']:
                pc.update({'ntlm auth': 'Yes'})
                pc.update({'client ntlmv2 auth': 'No'})
            pc.update({'directory name cache size': '0'})
            pc.update({'kernel change notify': 'No'})
            pc.update({'nsupdate command': "/usr/local/bin/samba-nsupdate -g"})
            if db['cifs']['description']:
                pc.update({'server string': db['cifs']['description']})
            pc.update({'lm announce': 'Yes'})
            if db['cifs']['hostlookup']:
                pc.update({'hostname lookups': 'Yes'})
            if not db['cifs']['unixext'] or not db['cifs']['enable_smb1']:
                pc.update({'unix extensions': 'No'})
            if db['cifs']['timeserver']:
                pc.update({'time server': 'Yes'})
            if db['cifs']['nullpw']:
                pc.update({'null passwords': 'Yes'})
            if db['cifs']['allow_execute_always']:
                pc.update({'acl allow execute always': 'Yes'})
            pc.update({'dos filemode': 'Yes'})
            if not db['cifs']['zeroconf']:
                pc.update({'multicast dns register': 'No'})
            if db['cifs']['filemask']:
                pc.update({'create mask': db['cifs']['filemask']})
            if db['cifs']['dirmask']:
                pc.update({'directory mask': db['cifs']['dirmask']})
            pc.update({'unix charset': db['cifs']['unixcharset']})
            if db['fruit_enabled']:
                pc.update({'fruit:nfs_aces': 'No'})

            return pc

        def add_licensebased_params(pc, db):
            if db['truenas_conf']['smb_ha_mode'] == 'UNIFIED':
                pc.update({
                    'netbios name': db['gc']['hostname_virtual'],
                    'netbios aliases': db['cifs']['netbiosalias']
                })
            elif db['truenas_conf']['is_truenas_ha']:
                pc.update({
                    'netbios name': db['cifs']['netbiosname'],
                    'netbios aliases': db['cifs']['netbiosalias'],
                    'private dir': '/root/samba/private',
                    'winbind netbios alias spn': 'True'
                })
            else:
                pc.update({
                    'netbios name': db['cifs']['netbiosname'],
                    'netbios aliases': db['cifs']['netbiosalias'],
                })

            return pc

        def add_rolebased_params(pc, db):
            if db['role'] == "ad_member":
                pc.update({'server role': 'member server'})
                pc.update({'kerberos method': 'secrets and keytab'})
                pc.update({'workgroup': db['cifs']['workgroup'].upper()})
                pc.update({'realm': db['ad']['domainname'].upper()})
                pc.update({'security': 'ADS'})
                pc.update({'client use spnego': 'Yes'})
                pc.update({'local master': 'No'})
                pc.update({'domain master': 'No'})
                pc.update({'preferred master': 'No'})
                if not db['ad']['allow_dns_updates']:
                    pc.update({'ad allow dns update': 'No'})
                pc.update({'winbind cache time': '7200'})
                pc.update({'winbind offline logon': 'Yes'})
                pc.update({'winbind enum users': 'Yes'})
                pc.update({'winbind enum groups': 'Yes'})
                if db['ad']['use_default_domain']:
                    pc.update({'winbind use default domain': 'Yes'})
                pc.update({'winbind refresh tickets': 'Yes'})
                if db['ad']['nss_info']:
                    pc.update({'winbind nss info': db['ad']['nss_info'].lower()})
                if not db['ad']['allow_trusted_doms']:
                    pc.update({'allow trusted domains': 'No'})
                pc.update({'client ldap sasl wrapping': db['ad']['ldap_sasl_wrapping'].lower()})
                pc.update({'template shell': '/bin/sh'})
                pc.update({'template homedir': f'{get_cifs_homedir()}/%D/%U'})

            elif db['role'] == 'ldap_member':
                pc.update({'server role': 'member server'})
                pc.update({'security': 'user'})
                if type(db['ldap']['ldap_hostname']) == list:
                    ldap_pdb_backend = "ldapsam:\"%s\"" & " ".join([
                        "%s://%s" % ("ldaps" if db['ldap']['ldap_ssl'] == 'ON' else "ldap", hostname)
                        for hostname in db['ldap']['ldap_hostname'].split()
                    ])
                else:
                    ldap_pdb_backend = f"ldapsam:{'ldaps' if db['ldap']['ldap_ssl'] == 'ON' else 'ldap'}://{db['ldap']['ldap_hostname']}"

                pc.update({'passdb backend': ldap_pdb_backend})
                pc.update({'ldap admin dn': db['ldap']['ldap_binddn']})
                pc.update({'ldap suffix': db['ldap']['ldap_basedn']})
                pc.update({'ldap user suffix': db['ldap']['ldap_usersuffix']})
                pc.update({'ldap group suffix': db['ldap']['ldap_groupsuffix']})
                pc.update({'ldap machine suffix': db['ldap']['ldap_machinesuffix']})
                pc.update({'workgroup': db['cifs']['workgroup'].upper()})
                if db['ldap']['ldap_ssl'] != "START_TLS":
                    pc.update({'ldap ssl': 'off'})
                pc.update({'ldap replication sleep': '1000'})
                pc.update({'ldap passwd sync': 'Yes'})
                pc.update({'ldapsam:trusted': 'Yes'})

                pc.update({'domain logons': 'Yes'})

            elif db['role'] == "standalone":
                pc.update({'server role': 'standalone'})
                pc.update({'workgroup': db['cifs']['workgroup'].upper()})

            return pc

        def add_idmap_domain(pc, db, idmap, autorid_enabled=False):
            """
            Generate idmap settings. DS_TYPE_LDAP, DS_TYPE_ACTIVEDIRECTORY, and DS_TYPE_DEFAULT_DOMAIN
            are reflected in the UI under Directory Service-> LDAP, Directory Service-> ActiveDirectory,
            and Services-> SMB respectively. These three domains will always exist in the output of
            'idmap.get_configured_idmap_domains'. The DS_TYPE_LDAP and DS_TYPE_ACTIVEDIRECTORY entries
            are ignored during idmap generation if the Directory Service is disabled.
            DS_TYPE_DEFAULT_DOMAIN is likewise ignored if AD is enabled and the autorid backend is
            enabled. This is because autorid can only apply to the default domain '*'.
            """
            if db['role'] == 'ad_member':
                if idmap['domain']['idmap_domain_name'] == 'DS_TYPE_LDAP':
                    return
                if autorid_enabled and idmap['domain']['idmap_domain_name'] == 'DS_TYPE_DEFAULT_DOMAIN':
                    return

            if db['ldap']['ldap_enable'] and idmap['domain']['idmap_domain_name'] == 'DS_TYPE_ACTIVEDIRECTORY':
                return

            if db['role'] == 'standalone':
                if idmap['domain']['idmap_domain_name'] in ['DS_TYPE_ACTIVEDIRECTORY', 'DS_TYPE_LDAP']:
                    return

            low_range = idmap['backend_data']['range_low']
            high_range = idmap['backend_data']['range_high']
            backend = idmap['idmap_backend'].lower()

            if idmap['domain']['idmap_domain_name'] in ['DS_TYPE_ACTIVEDIRECTORY', 'DS_TYPE_LDAP']:
                domain = db['cifs']['workgroup']
            elif idmap['domain']['idmap_domain_name'] == 'DS_TYPE_DEFAULT_DOMAIN':
                domain = '*'
            else:
                domain = idmap['domain']['idmap_domain_name']

            if backend != "autorid":
                pc.update({f'idmap config {domain}: backend': backend})
                pc.update({f'idmap config {domain}: range': f'{low_range}-{high_range}'})

            if backend == "autorid":
                pc.update({'idmap config * : backend': backend})
                pc.update({'idmap config * : range': f'{low_range}-{high_range}'})
                pc.update({'idmap config * : rangesize': idmap['backend_data']['rangesize']})
                if idmap['backend_data']['readonly']:
                    pc.update({'idmap config * : readonly': 'Yes'})
                if idmap['backend_data']['ignore_builtin']:
                    pc.update({'idmap config * : ignore_builtin': 'Yes'})

            elif backend == "ad":
                pc.update({f'idmap config {domain}: schema_mode': idmap['backend_data']['schema_mode'].lower()})
                if idmap['backend_data']['unix_nss_info']:
                    pc.update({f'idmap config {domain}: unix_nss_info': 'Yes'})
                if idmap['backend_data']['unix_primary_group']:
                    pc.update({f'idmap config {domain}: unix_primary_group': idmap['backend_data']['unix_primary_group']})

            elif backend == "ldap":
                if idmap['backend_data']['ldap_base_dn']:
                    pc.update({f'idmap config {domain}: ldap_base_dn': idmap['backend_data']['ldap_base_dn']})
                if idmap['backend_data']['ldap_user_dn']:
                    pc.update({f'idmap config {domain}: ldap_user_dn': idmap['backend_data']['ldap_user_dn']})
                if idmap['backend_data']['ldap_url']:
                    pc.update({f'idmap config {domain}: ldap_url': idmap['backend_data']['ldap_url']})
                pc.update({f'idmap config {domain}: read only': 'Yes'})
                
            elif backend == "rfc2307":
                pc.update({f'idmap config {domain}: ldap_server': idmap['backend_data']['ldap_server']})
                if idmap['backend_data']['ldap_server_url']:
                    pc.update({f'idmap config {domain}: ldap_url': idmap['backend_data']['ldap_url']})
                if idmap['backend_data']['bind_path_user']:
                    pc.update({f'idmap config {domain}: bind_path_user': idmap['backend_data']['bind_path_user']})
                if idmap['backend_data']['bind_path_group']:
                    pc.update({f'idmap config {domain}: bind_path_group': idmap['backend_data']['bind_path_group']})
                if idmap['backend_data']['user_cn']:
                    pc.update({f'idmap config {domain}: user_cn': "Yes"})
                if idmap['backend_data']['realm']:
                    pc.update({f'idmap config {domain}: realm': "Yes"})
                if idmap['backend_data']['ldap_domain']:
                    pc.update({f'idmap config {domain}: ldap_domain': idmap['backend_data']['ldap_domain']})
                if idmap['backend_data']['ldap_user_dn']:
                    pc.update({f'idmap config {domain}: ldap_user_dn': idmap['backend_data']['ldap_user_dn']})
                if idmap['backend_data']['ssl']:
                    pc.update({'ldap ssl': 'start tls'})
                    if idmap['backend_data']['ldap_server'].lower() == "ads":
                        pc.update({'ldap ssl ads': 'Yes'})

            elif backend == "script":
                if idmap['backend_data']['script']:
                    pc.update({f'idmap config {domain}: script': idmap['backend_data']['script']})

            return pc

        def add_idmap_params(pc, db):
            idmap_domains = middleware.call_sync('idmap.get_configured_idmap_domains')
            autorid_enabled = False
            if db['role'] == "ad_member":
                autorid_enabled = any(filter(lambda x: x['idmap_backend'] == 'autorid', idmap_domains))

            for domain in idmap_domains:
                add_idmap_domain(pc, db, domain, autorid_enabled)

            return pc

        def add_aux_params(pc, db):
            for param in db['cifs']['smb_options'].splitlines():
                if not param.strip():
                    continue
                try:
                    param_kv = [kv.strip() for kv in param.split("=")]
                    pc.update({param_kv[0]: param_kv[1]})
                except Exception:
                    logger.debug(f"[global] contains invalid auxiliary parameter: ({param})")

        def parse_config(db):
            pc = {}
            add_general_params(pc, db)
            add_bind_interfaces(pc, db)
            add_licensebased_params(pc, db)
            add_rolebased_params(pc, db)
            add_idmap_params(pc, db)
            add_aux_params(pc, db)

            return pc

        db = get_db_config()
        parsed_conf = parse_config(db)

%>

[global]
%if db['truenas_conf']['smb_ha_mode'] == 'UNIFIED' and db['truenas_conf']['failover_status'] != 'MASTER':
        [global]
        netbios name = {db['gc']['hostname_virtual']}_PASSIVE
        multicast dns register = False
        logging = file
%else:
    % for param, value in parsed_conf.items():
      % if type(value) == list:
        ${param} = ${' '.join(value)}
      % else:
        ${param} = ${value}
      % endif
    % endfor
%endif

        include = /usr/local/etc/smb4_share.conf
