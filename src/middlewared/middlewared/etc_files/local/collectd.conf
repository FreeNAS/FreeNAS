<%
	if not middleware.call_sync('systemdataset.update_collectd_dataset'):
		# Let's exit this if collectd related disk operations fail
		middleware.logger.error('Collectd configuration file could not be generated')
		exit(1)
	config = middleware.call_sync('systemdataset.config')
	advanced_config = middleware.call_sync('system.advanced.config')
	graphite = advanced_config['graphite']
	cpu_in_percentage = advanced_config['cpu_in_percentage']
	is_freenas = middleware.call_sync('system.is_freenas')
	rrd_mount = ''
	if config['path']:
		rrd_mount = f'{config["path"]}/rrd-{config["uuid"]}'

	use_rrd_dataset = False
        if (
		rrd_mount and config['rrd'] and (
			is_freenas or (not is_freenas and self.middleware.call_sync('notifier.failover_status') != 'BACKUP')
		)
	):
		use_rrd_dataset = True

	base_dir = '/var/db/collectd'
	data_dir = '/var/db/collectd/rrd'
	hostname = middleware.call_sync('system.info')['hostname']
	if not hostname:
		hostname = middleware.call_sync('network.configuration.config')['hostname']

	if cpu_in_percentage:
		cpu_plugin_options = 'ValuesPercentage True'
		aggregation_plugin_cpu_type = 'percent'
	else:
		cpu_plugin_options = ''
		aggregation_plugin_cpu_type = 'cpu'

%>
Hostname "${hostname}"
FQDNLookup true
BaseDir "${base_dir}"
PIDFile "/var/run/collectd.pid"
PluginDir "/usr/local/lib/collectd"

LoadPlugin aggregation
LoadPlugin cpu
LoadPlugin cputemp
LoadPlugin ctl
LoadPlugin df
LoadPlugin disk
LoadPlugin exec
LoadPlugin geom_stat
LoadPlugin interface
LoadPlugin load
LoadPlugin memory
LoadPlugin network
LoadPlugin processes
LoadPlugin python
LoadPlugin rrdtool
LoadPlugin swap
LoadPlugin uptime
LoadPlugin syslog
LoadPlugin threshold
LoadPlugin zfs_arc
LoadPlugin zfs_arc_v2
LoadPlugin nfsstat

<Plugin "syslog">
	LogLevel err
</Plugin>

<Plugin "aggregation">
	<Aggregation>
		Plugin "cpu"
		Type "${aggregation_plugin_cpu_type}"
		GroupBy "Host"
		GroupBy "TypeInstance"
		CalculateNum true
		CalculateSum true
		CalculateAverage true
		CalculateMinimum true
		CalculateMaximum true
		CalculateStddev true
	</Aggregation>
</Plugin>
<Plugin cpu>
	${cpu_plugin_options}
</Plugin>

<Plugin cputemp>
</Plugin>

<Plugin "disk">
	Disk "/^gptid/"
	Disk "/^md/"
	Disk "/^pass/"
	IgnoreSelected true
</Plugin>

<Plugin "exec">
	NotificationExec "nobody" "/usr/local/www/freenasUI/tools/collectd_alert.py"
</Plugin>

<Plugin "interface">
	Interface "lo0"
	Interface "ipfw0"
	Interface "pflog0"
	Interface "pfsync0"
	Interface "plip0"
	Interface "/^usbus/"
	IgnoreSelected true
</Plugin>

<Plugin "rrdtool">
	DataDir "${data_dir}"
% if use_rrd_dataset:
	CacheTimeout 120
	CacheFlush 900
% endif
</Plugin>

<Plugin "threshold">
	<Plugin "ctl">
		Instance "ha"
		<Type "disk_octets">
			WarningMax 10000000
			Persist true
			Interesting false
		</Type>
	</Plugin>
</Plugin>

<Plugin "zfs_arc">
</Plugin>

<Plugin "geom_stat">
	Filter "^([a]?da|ciss|md|mfi|md|nvd|pmem|xbd|vtbd)[0123456789]+$"
</Plugin>

<Plugin "df">
	Mountpoint "/"
	Mountpoint "^\/mnt(?:(?!\.zfs\/snapshot).)*$"
	FSType "zfs"
	LogOnce true
</Plugin>

<Plugin python>
	ModulePath "/usr/local/lib/collectd_pyplugins"
	LogTraces true
	Interactive false
	Import "disktemp"

	<Module "disktemp">
	</Module>
</Plugin>
% if graphite:

LoadPlugin write_graphite
<Plugin "write_graphite">
	<Node "graphite">
		Host "${graphite}"
		Port "2003"
		Protocol "tcp"
		LogSendErrors true
		Prefix "servers."
		Postfix ""
		StoreRates true
		AlwaysAppendDS false
		EscapeCharacter "_"
	</Node>
</Plugin>
% endif
