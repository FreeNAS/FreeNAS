<%
        def safe_call(*args):
            try:
                val = middleware.call_sync(*args)
            except:
                val = False
            return val

        ldap = middleware.call_sync('ldap.config')
        ldap_enabled = ldap['enable']
        if ldap_enabled:
            ldap_uri = ["%s://%s" % ("ldaps" if ldap['ssl'] == "ON" else "ldap", x) for x in ldap['hostname']]
            certpath = None
            if ldap['certificate']:
                cert = safe_call('certificate.query', [('id', '=', ldap['certificate']['id'])], {'get': True})
                if cert:
                    certpath = cert['certificate_path']
%>
% if ldap_enabled:
uri ${" ".join(ldap_uri)}
base ${ldap['basedn']}
    % if ldap['ssl'] in ('START_TLS', 'ON'):
ssl ${ldap['ssl']}.lower()
        % if certpath:
tls_cacert ${certpath}
        % endif
tls_reqcert allow
    % endif
scope sub
timelimit ${ldap['timeout']}
bind_timelimit 30
bind_policy soft
nss_override_attribute_value loginShell /bin/sh
nss_schema ${ldap['schema'].lower()}
    % if ldap['auxiliary_parameters']:
${ldap['auxiliary_parameters']}
    % endif
% endif
