#!/usr/local/bin/python2.7
#+
# Copyright 2015 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

from __future__ import print_function
import sys
import argparse
import json
import datastore


DEFAULT_CONFIGFILE = '/usr/local/etc/middleware.conf'
ds = None


def init_datastore(filename, alt):
    global ds

    try:
        f = open(filename)
        conf = json.load(f)
        f.close()
    except IOError, err:
        print("Cannot read config file: {0}".format(str(err)))
        sys.exit(1)
    except ValueError, err:
        print("Cannot read config file: {0}".format(str(err)))
        sys.exit(1)

    if not 'datastore' in conf:
        print("Cannot initialize datastore: configuration not found")
        sys.exit(1)

    try:
        dsn = 'dsn-alt' if alt else 'dsn'
        ds = datastore.get_datastore(conf['datastore']['driver'], conf['datastore'][dsn])
    except datastore.DatastoreException, err:
        print("Cannot initialize datastore: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)


def migrate_collection(dump):
    metadata = dump['metadata']
    data = dump['data']
    name = metadata['name']
    integer = metadata['pkey-type'] == 'integer'
    upsert = metadata['migration'] in ('merge-overwrite', 'replace')

    if metadata['migration'] == 'keep':
        return

    if metadata['migration'] == 'replace':
        ds.collection_delete(name)

    if not ds.collection_exists(name):
        ds.collection_create(name, metadata['pkey-type'], metadata['attributes'])

    for key, row in data.items():
        pkey = int(key) if integer else key
        if metadata['migration'] == 'merge-preserve':
            if not ds.exists(name, ('id', '=', pkey)):
                ds.insert(name, row, pkey=pkey)

            continue

        ds.update(name, pkey, row, upsert=upsert)


def main():
    global ds
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', metavar='CONFIG', default=DEFAULT_CONFIGFILE, help='Config file name')
    parser.add_argument('-f', metavar='FILE', help='Input file name')
    parser.add_argument('--alt', action='store_true', help='Use alternate DSN')

    args = parser.parse_args()
    init_datastore(args.c, args.alt)

    try:
        fd = open(args.f, 'r') if args.f else sys.stdin
        dump = json.load(fd)
    except IOError, err:
        print("Cannot open input file: {0}".format(str(err)))
        sys.exit(1)
    except ValueError, err:
        print("Cannot parse input file: {0}".format(str(err)))
        sys.exit(1)

    for i in dump:
        migrate_collection(i)
        print("Migrated collection {0}".format(i['metadata']['name']), file=sys.stderr)


if __name__ == '__main__':
    main()