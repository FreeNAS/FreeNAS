#!/usr/local/bin/python2.7
#+
# Copyright 2015 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

from __future__ import print_function
import argparse
import os
import sys
import string
import launchd
import json


DEFAULT_CONFIGFILE = '/usr/local/etc/middleware.conf'


def read_config(filename):
    try:
        f = open(filename)
        conf = json.load(f)
        f.close()
    except IOError, err:
        print("Cannot read config file: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)
    except ValueError, err:
        print("Cannot read config file: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)

    if 'datastore' not in conf:
        print("Cannot initialize datastore: configuration not found", file=sys.stderr)
        sys.exit(1)

    return conf


def do_init(control, db_dir):
    return subprocess.call([control, db_dir, 'init'])


def do_start_forked(control, db_dir, port):
    args = [control, db_dir, 'start']
    if port:
        args += [str(port)]

    return subprocess.call(args)


def do_stop_forked(control, db_dir):
    return subprocess.call([control, db_dir, 'stop'])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', metavar='CONFIG', default=DEFAULT_CONFIGFILE, help='Config file name')
    parser.add_argument('--init', action='store_true', help='Initialize datastore directory')
    parser.add_argument('--port', help='TCP port number to be used by database server')
    parser.add_argument('--start-forked', action='store_true')
    parser.add_argument('--stop-forked', action='store_true')
    args = parser.parse_args()
    config = read_config(args.c)

    ds = config['datastore']
    db_dir = ds['dbdir']
    driver_name = ds['drier']
    driver_dir = os.path.join('/usr/local/lib/datastore/drivers', ds['driver'])
    control = os.path.join(driver_dir, 'control')

    if args.init:
        sys.exit(do_init(control, db_dir))

    if args.start_forked:
        sys.exit(do_start_forked(control, db_dir, args.port))

    if args.stop_forked:
        sys.exit(do_stop_forked(control, db_dir))


if __name__ == '__main__':
    main()
